name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # API Gateway Service
  api-gateway:
    name: API Gateway
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./services/api-gateway
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('services/api-gateway/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy -- -D warnings

      - name: Run tests
        run: cargo test --verbose

      - name: Build
        run: cargo build --release

      - name: Build Docker image
        run: docker build -t api-gateway:${{ github.sha }} .

  # Node Service Template
  node-template:
    name: Node Service Template
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./services/node-template
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('services/node-template/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy -- -D warnings

      - name: Run tests
        run: cargo test --verbose

      - name: Build
        run: cargo build --release

      - name: Build Docker image
        run: docker build -t node-template:${{ github.sha }} .

  # Frontend
  frontend:
    name: Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Type check
        run: npx tsc --noEmit

      - name: Build
        run: npm run build

      - name: Build Docker image
        run: |
          cat > Dockerfile << 'EOF'
          FROM node:20-alpine AS deps
          WORKDIR /app
          COPY package*.json ./
          RUN npm ci --only=production

          FROM node:20-alpine AS builder
          WORKDIR /app
          COPY package*.json ./
          RUN npm ci
          COPY . .
          RUN npm run build

          FROM node:20-alpine AS runner
          WORKDIR /app
          ENV NODE_ENV production
          RUN addgroup -g 1001 -S nodejs
          RUN adduser -S nextjs -u 1001
          COPY --from=builder /app/public ./public
          COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
          COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
          USER nextjs
          EXPOSE 3000
          ENV PORT 3000
          CMD ["node", "server.js"]
          EOF
          docker build -t frontend:${{ github.sha }} .

  # SonarQube Analysis
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [api-gateway, node-template, frontend]
    if: github.event_name == 'push' && github.repository != 'danielundeutsch/crypto-staking-platform' || contains(github.event.head_commit.message, '[sonar]')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=crypto-staking-platform
            -Dsonar.sources=services,frontend/src
            -Dsonar.exclusions=**/*.test.ts,**/*.spec.ts,**/node_modules/**,**/target/**

  # Deploy to staging (only on main branch)
  # deploy-staging:
  #   name: Deploy to Staging
  #   runs-on: ubuntu-latest
  #   needs: [api-gateway, node-template, frontend, sonarqube]
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Deploy to Kubernetes
  #       run: |
  #         echo "Deploying to staging environment..."
  #         # kubectl apply -f infrastructure/k8s/staging/